@page "/feed/follow"
@implements IDisposable

@using Nostrid.Data
@using Nostrid.Data.Relays;
@using Nostrid.Model;
@using Nostrid.Misc;
@inject AccountService accountService

<h2>Following Feed</h2>

<div class="d-none d-md-flex px-3 pb-2" style="margin: 0 -1rem;">
    <NoteComposer />
</div>

@if (accountService.MainAccount?.FollowList.Count == 0)
{
    <div class="h-100 d-flex flex-column align-items-center justify-content-center text-center border-top px-2 py-3" style="margin: 0 -1rem;">
        <i class="fs-1 bi bi-person-x"></i>
        <p class="fw-bold">No follows yet.</p>
        <p>If you recently restored your account then your follows may take a few minutes to be discovered.</p>
    </div>
}
else
{
    <FeedViewer BaseFilter="@filter" MessageKinds="@(new[]{NostrKind.Text, NostrKind.Repost})" />
}

@code {
    private SubscriptionFilter? filter;

    protected override void OnInitialized()
    {
        accountService.MainAccountChanged += MainAccountChanged;
        SetFilter();
    }

    private void MainAccountChanged(object? sender, EventArgs args)
    {
        SetFilter();
        InvokeAsync(() => StateHasChanged());
    }

    private void SetFilter()
    {
        if (accountService.MainAccount == null
            || accountService.MainAccount.FollowList.Count == 0)
        {
            filter = null;
        }
        else
        {
            filter = new AccountSubscriptionFilter(accountService.MainAccount.FollowList.ToArray());
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                accountService.MainAccountChanged -= MainAccountChanged;
            }

            _disposed = true;
        }
    }
    #endregion
}