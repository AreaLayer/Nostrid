@page "/accounts"
@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;
@using System.Security.Cryptography;

@inject AccountService accountService
@inject EventDatabase eventDatabase
@implements IDisposable

<h2>Accounts</h2>

<div class="container-fluid p-0">
    <div class="row g-3">
        @foreach (var account in accounts.Values.ToList())
        {
            <div class="col-md-6 col-lg-4 col-xl-3 col-xxl-3">
                <div class="card h-100 @(accountService.MainAccount?.Id == account.Id ? "border-primary" : "")">
                    <div class="position-absolute" style="top: 5px; right: 5px;">
                        <button type="button" class="btn btn-light" data-bs-toggle="modal" data-bs-target="#confirmDeleteAccountModal">
                            <i class="bi bi-trash3-fill"></i>
                        </button>
                        <button type="button" class="btn btn-light " @onclick="() => ToggleEditAccountDetails(account)">
                            <i class="bi @(account.Id != accountEditing ? "bi-pencil-fill" : "bi-x-lg")"></i>
                        </button>
                        <!-- Modal -->
                        <div class="modal fade" id="confirmDeleteAccountModal" tabindex="-1" aria-hidden="true">
                            <div class="modal-dialog modal-fullscreen-sm-down modal-dialog-centered">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="exampleModalLabel">Are you sure?</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        Do you really want to delete this account?
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="() => RemoveAccount(account)">Delete</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body text-center d-flex flex-column justify-content-between align-items-center">
                        @if (!string.IsNullOrEmpty(account.Details?.PictureUrl))
                        {
                            <img style="width:64px; height:64px" src="@account.Details?.PictureUrl" class="card-img-top rounded-5" alt="">
                        }
                        else
                        {
                            <div class="lh-1">
                                <div class="border rounded-2 overflow-hidden d-inline-block">
                                    @((MarkupString)Utils.ToSvgIdenticon(account.Id, 64))
                                </div>
                            </div>
                        }
                        @if (account.Id != accountEditing)
                        {
                            @if(!string.IsNullOrEmpty(account.Details?.Name) || !string.IsNullOrEmpty(account.Details?.About))
                            {
                                    <div class="mt-3">
                                    <h5 class="card-title fw-bold">@account.Details?.Name</h5>
                                    <p class="card-text fst-italic m-0">@account.Details?.About</p>
                                </div>   
                            }
                            <button class="mt-3 btn btn-outline-primary w-100 @(accountService.MainAccount?.Id == account.Id ? "disabled" : "")" @onclick="() => SelectAccount(account)">
                                @(accountService.MainAccount?.Id == account.Id ? "Loaded" : "Load")
                            </button>
                        }
                        else
                        {
                            <EditForm class="w-100" Model="@accountDetails" OnValidSubmit="@(() => SaveAccountDetails(account))">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-floating mt-3">
                                    <InputText class="form-control" id="name-control" @bind-Value="accountDetails.Name" />
                                    <label for="name-control">Name</label>
                                </div>
                                <div class="form-floating mt-3">
                                    <InputText class="form-control" id="about-control" @bind-Value="accountDetails.About" />
                                    <label for="about-control">About</label>
                                </div>
                                <div class="form-floating mt-3">
                                    <InputText class="form-control" id="picture-control" @bind-Value="accountDetails.PictureUrl" />
                                    <label for="picture-control">Picture URL</label>
                                </div>
                                <button type="submit" class="btn btn-outline-primary w-100 mt-3">
                                    Save
                                </button>
                            </EditForm>
                        }
                    </div>
                    <div class="card-footer text-muted fs-7">
                        <div class="flex-grow-1 text-break">
                            Public Key: @account.Id <br />
                            Npub: @ByteTools.PubkeyToNpub(account.Id)
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="col-md-6 col-lg-4 col-xl-3 col-xxl-3">
            <div class="card h-100">
                <div class="position-absolute" style="top: 5px; right: 5px;">
                    @if (accountCreating)
                    {
                        <button class="btn btn-light " @onclick="ToggleCreateAccount">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    }
                </div>
                <div class="card-body text-center d-flex flex-column justify-content-center align-items-center">
                    @if (!accountCreating)
                    {
                        <button class="btn btn-light" @onclick="ToggleCreateAccount">
                            <i class="bi bi-person-plus"></i>
                            <div>Add account</div>
                        </button>
                    }
                    else
                    {
                        <div class="lh-1">
                            <div class="border rounded-2 overflow-hidden d-inline-block">
                                @((MarkupString)Utils.ToSvgIdenticon(PublicKey, 64))
                            </div>
                        </div>
                        <EditForm class="w-100" Model="@privateKeyModel" OnValidSubmit="@CreateNewAccount">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="input-group mt-3">
                                <div class="form-floating">
                                    <InputText class="form-control" id="private-key-control" @bind-Value="privateKeyModel.Text" />
                                    <label for="private-key-control">Private Key</label>
                                </div>
                                <button class="btn btn-outline-secondary" type="button" @onclick="GeneratePrivateKey">
                                    <i class="bi bi-arrow-repeat"></i>
                                </button>
                            </div>
                            <button type="submit" class="btn btn-outline-primary w-100 mt-3">
                                Save
                            </button>
                        </EditForm>
                    }
                </div>
                @if (accountCreating)
                {
                    <div class="card-footer text-muted fs-7">
                        <div class="flex-grow-1 text-break">
                            Public Key: @PublicKey <br />
                            Npub: @ByteTools.PubkeyToNpub(PublicKey)
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {

    private Dictionary<string, Account> accounts;

    private string accountEditing;
    private AccountDetails accountDetails = new();

    private bool accountCreating;
    public TextInput privateKeyModel = new();

    private string PublicKey 
    { 
        get
        {
            Account account;
            return TryCreateAccount(privateKeyModel.Text, out account)
                ? account.Id
                : string.Empty;
        }
    }

    EventHandler<(string accountId, AccountDetails details)> accountDetailsChangedEventHandler;

    protected override void OnInitialized()
    {
        accountDetailsChangedEventHandler = (sender, eventArgs) =>
        {
            Account account;
            if (accounts.TryGetValue(eventArgs.accountId, out account))
            {
                account.Details = eventArgs.details;
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        };
        accountService.AccountDetailsChanged += accountDetailsChangedEventHandler;
        LoadAccounts();
        base.OnInitialized();
    }

    private void LoadAccounts()
    {
        var accountIds = eventDatabase.GetAccountIdsWithPk();
        accounts = accountIds.Select(accountId => eventDatabase.GetAccount(accountId)).ToDictionary(account => account.Id, account => account);
    }

    private void SelectAccount(Account account)
    {
        accountService.MainAccount = account;
    }

    private void ToggleEditAccountDetails(Account account)
    {
        accountEditing = accountEditing == account.Id ? null : account.Id;
        accountDetails.Name = account.Details?.Name;
        accountDetails.About = account.Details?.About;
        accountDetails.PictureUrl = account.Details?.PictureUrl;
    }

    // TODO: move save account details to profile
    private void SaveAccountDetails(Account account)
    {
        accountService.MainAccount = account;
        accountService.SaveAccountDetails(accountDetails);
        accountEditing = null;
        LoadAccounts();
    }

    private void ToggleCreateAccount()
    {
        accountCreating = !accountCreating;
    }

    private void GeneratePrivateKey()
    {
        privateKeyModel.Text = Convert.ToHexString(RandomNumberGenerator.GetBytes(32)).ToLower();
    }

    private void CreateNewAccount()
    {
        Account account;
        if (TryCreateAccount(privateKeyModel.Text, out account))
        {
            eventDatabase.SaveAccount(account);
            ToggleCreateAccount();
            LoadAccounts();
            SelectAccount(account);
        }
        else
        {
            //TODO: mark private key as invalid    
        }
    }

    private bool TryCreateAccount(string privateKey, out Account account)
    {
        try
        {
            account = new Model.Account(privateKey);
            return true;
        }
        catch
        {
            account = null;
            return false;
        }
    }

    private void RemoveAccount(Account account)
    {
        eventDatabase.DeleteAccount(account);
        LoadAccounts();
    }

    private bool _disposed;

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                accountService.AccountDetailsChanged -= accountDetailsChangedEventHandler;
            }

            _disposed = true;
        }
    }

    void IDisposable.Dispose()
    {
        Dispose(true);
    }
}