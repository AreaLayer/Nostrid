@implements IDisposable

@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject AccountService accountService
@inject FeedService feedService
@inject ConfigService configService

@code{
    [Parameter]
    public NoteTree ReplyTo { get; set; }

    [Parameter]
    public Action OnSend { get; set; }
}

@if (accountService.MainAccount != null)
{
    @if (ReplyTo != null)
    {
        <NoteTreeViewer Trees="@(new List<NoteTree>() { ReplyTo })" ReplyingTo="true" />
    }
    <div class="d-flex flex-row flex-grow-1 align-items-start px-3 py-2" style="margin: 0 -1rem;">
        <a class="flex-shrink-0" href="/account/@accountService.MainAccount.Id">
            <AccountPicture Details="@accountService.MainAccount?.Details" Id="@accountService.MainAccount?.Id"></AccountPicture>
        </a>
        <div class="flex-grow-1 ms-2">
            <p class="mb-1">
                <a href="/account/@accountService.MainAccount.Id" class="fw-bold text-decoration-none mb-1">
                    <AccountName Details="@accountService.MainAccount.Details" Id="@accountService.MainAccount.Id" />
                </a>
            </p>
            <EditForm Model="@textInput" OnValidSubmit="@Send">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputTextArea @bind-Value="textInput.Text" rows="3" style="resize: none;" class="form-control" placeholder="Leave a comment here" id="floatingTextarea" />
                <button disabled="@string.IsNullOrEmpty(textInput.Text)" type="submit" class="btn btn-primary my-2">
                    @(ReplyTo != null ? "Reply" : "Send note")
                </button>
                @if (sending)
                {
                    <p>Sending with pow @configService.MainConfig.TargetDiffOutgoing... <button class="btn bi bi-x-octagon p-0 text-secondary" @onclick="@CancelPow" /> </p>
                }
            </EditForm>
        </div>
    </div>
}

@code {

    private TextInput textInput = new();

    private bool sending;

    private CancellationTokenSource? powCancelSource;


    private void CancelPow()
    {
        if (powCancelSource == null)
            return;

        powCancelSource.Cancel();
        powCancelSource = new();
        sending = false;
    }

    private void Send()
    {
        powCancelSource = new();
        if (!string.IsNullOrEmpty(textInput.Text))
        {
            var content = textInput.Text;
            textInput.Text = string.Empty;
            sending = true;
            feedService
                .SendNoteWithPow(content, ReplyTo?.Note, accountService.MainAccount, configService.MainConfig.TargetDiffOutgoing, powCancelSource.Token)
                .ContinueWith((_) =>
                {
                    powCancelSource = null;
                    sending = false;
                    OnSend?.Invoke();
                    InvokeAsync(() => StateHasChanged());
                }, TaskContinuationOptions.OnlyOnRanToCompletion)
                .ContinueWith((_) => InvokeAsync(() => StateHasChanged()));
        }
    }

    protected override void OnInitialized()
    {
        accountService.MainAccountChanged += MainAccountChanged;
    }

    private void MainAccountChanged(object sender, EventArgs args)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                CancelPow();
                accountService.MainAccountChanged -= MainAccountChanged;
            }

            _disposed = true;
        }
    }
    #endregion
}
