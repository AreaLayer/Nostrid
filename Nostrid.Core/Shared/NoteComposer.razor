@implements IDisposable

@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject AccountService accountService
@inject FeedService feedService
@inject ConfigService configService

@code{
    [Parameter]
    public Event? ReplyTo { get; set; }

    [Parameter]
    public string? ChannelId { get; set; }

    [Parameter]
    public Action? OnSend { get; set; }
}

@if (accountService.MainAccount != null)
{
    @if (ReplyTo != null)
    {
        <div class="pb-2">
            <EventViewer Event="ReplyTo">
                <LeftPlaceholder>
                    <div class="flex-grow-1 d-flex flex-row note">
                        <div class="tree-placeholder-width-half"></div>
                        <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                    </div>
                </LeftPlaceholder>
            </EventViewer>
        </div>
    }
    <div class="d-flex flex-row flex-grow-1 align-items-start @(ReplyTo != null ? "pt-2" : "")">
        <a class="flex-shrink-0" href="/account/@accountService.MainAccount.Id">
            <AccountPicture Url="@accountService.MainAccount?.Details?.PictureUrl" Id="@accountService.MainAccount?.Id"></AccountPicture>
        </a>
        <div class="flex-grow-1 ms-2">
            <p class="mb-1">
                <a href="/account/@accountService?.MainAccount?.Id" class="fw-bold text-decoration-none mb-1">
                    <AccountName Details="@accountService?.MainAccount?.Details" Id="@accountService?.MainAccount?.Id" />
                </a>
            </p>
            @if (!string.IsNullOrEmpty(ChannelId))
            {
                <p class="mb-1" style="font-size:0.5rem">Channel ID: @ChannelId</p>
            }
            <EditForm Model="@textInput" OnValidSubmit="@Send">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <textarea value="@textInput.Text" @oninput="@((args) => { textInput.Text = args.Value as string ?? string.Empty; })"
                          rows="4" style="resize: none;" class="form-control" placeholder="Leave a comment here" id="floatingTextarea" />
                @if (sending)
                {
                    <div class="d-flex flex-row align-items-center flex-wrap mt-2">
                    <button class="btn btn-secondary me-2" @onclick="@CancelPow">
                        <i class="bi bi-x"></i>
                        Cancel PoW
                    </button>
                    <span class="d-inline-block my-2">
                        <span>Sending with pow @configService.MainConfig.TargetDiffOutgoing.</span>
                        <span class="d-inline-block">If you leave this page it will be aborted.</span>
                    </span>
                    </div>
                }
                else
                {
                    <button disabled="@string.IsNullOrEmpty(textInput.Text)" type="submit" class="btn btn-primary mt-2">
                        @(ReplyTo != null ? "Reply" : "Send note")
                    </button>
                }
            </EditForm>
        </div>
    </div>
}

@code {

    private TextInput textInput = new();

    private bool sending;

    private CancellationTokenSource? powCancelSource;


    private void CancelPow()
    {
        if (powCancelSource == null)
            return;

        powCancelSource.Cancel();
        powCancelSource = new();
        sending = false;
    }

    private void Send()
    {
        powCancelSource = new();
        if (!string.IsNullOrEmpty(textInput.Text))
        {
            var mentions = ReplyTo?.NoteMetadata.AccountMentions.Values.Union(new[] { ReplyTo.PublicKey });
            var content = textInput.Text;

            textInput.Text = string.Empty;

            Task sendTask;
            if (!string.IsNullOrEmpty(ChannelId))
            {
                sendTask = feedService.SendNoteWithPow(content, true, ReplyTo?.Id, ChannelId, mentions, configService.MainConfig.TargetDiffOutgoing, powCancelSource.Token);
            }
            else
            {
                sendTask = feedService.SendNoteWithPow(content, false, ReplyTo?.Id, ReplyTo?.NoteMetadata?.ReplyToRootId, mentions, configService.MainConfig.TargetDiffOutgoing, powCancelSource.Token);
            }

            sending = true;
            sendTask
                .ContinueWith((_) =>
                {
                    OnSend?.Invoke();
                }, TaskContinuationOptions.OnlyOnRanToCompletion)
                .ContinueWith((_) =>
                {
                    powCancelSource = null;
                    sending = false;
                    InvokeAsync(() => StateHasChanged());
                });
        }
    }

    protected override void OnInitialized()
    {
        accountService.MainAccountChanged += MainAccountChanged;
    }

    private void MainAccountChanged(object? sender, EventArgs args)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                CancelPow();
                accountService.MainAccountChanged -= MainAccountChanged;
            }

            _disposed = true;
        }
    }
    #endregion
}
