@implements IAsyncDisposable

@using Markdig;
@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;
@using Ganss.Xss;
@using System.Web;
@using System.Net;

@inject NavigationManager navigationManager
@inject AccountService accountService
@inject FeedService feedService
@inject IJSRuntime jsRuntime
@inject HtmlSanitizer htmlSanitizer
@inject NoteProcessor noteProcessor
@inject ConfigService configService

<div role="button" @ref="referenceElement" class="note d-flex flex-row px-2 px-lg-3 py-2 @(!ReplyingTo ? "bg-tertiary-hover border-top" : "" ) @(Tree.Note.Id == MainEventId ? "bg-body-secondary" : "")"
     @onclick="@(() => navigationManager.NavigateTo($"/note/{Tree.Note.Id}"))" style="margin: 0 -1rem; font-size: .95rem;">

    @for (var i = 1; i < TreeLayout.Length; i++)
    {
        var last = i == TreeLayout.Length - 1;
        <div class="flex-shrink-0 d-flex flex-row">
            <div class="tree-placeholder-width-half"></div>
            @if (TreeLayout[i] > 1)
            {
                <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
            }
            else if (!OnlyChild && TreeLayout[i] == 1 && last)
            {
                <div class="bg-secondary opacity-75 tree-line-width tree-placeholder-height-half"></div>
            }
            else
            {
                <div class="tree-line-width"></div>
            }
            <div class="d-flex flex-column justify-content-center tree-placeholder-height tree-placeholder-width-last">
                @if (!OnlyChild && last)
                {
                    <div class="bg-secondary opacity-75 tree-line-height"></div>
                }
            </div>
        </div>
    }

    @if (Tree.Note.Deleted)
    {
        <div class="d-flex flex-grow-1 align-items-center justify-content-center text-secondary">Note deleted</div>
    }
    else
    {
        <div class="d-flex flex-column">
            <a class="flex-shrink-0" href="/account/@Tree.Note.PublicKey" @onclick:stopPropagation="true">
                <AccountPicture Details="@Tree.Details" Id="@Tree.Note.PublicKey"></AccountPicture>
            </a>
            @if (Tree.Children.Count > 0 || ReplyingTo)
            {
                <div class="flex-grow-1 d-flex flex-row">
                    <div class="tree-placeholder-width-half"></div>
                    <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                </div>
            }
        </div>
        <div class="flex-grow-1 ms-2">
            @*<a style="font-size: 13px; margin: 0px; padding: 0px;" href="/note/@Tree.Note.Id">@ByteTools.PubkeyToNote(Tree.Note.Id, true)</a>*@
            <p class="mb-1">
                <a href="/account/@Tree.Note.PublicKey" @onclick:stopPropagation="true" class="fw-bold text-decoration-none mb-1"><AccountName Details="@Tree.Details" Id="@Tree.Note.Id" /></a>
                <span class="text-secondary">
                    <span>·</span>
                    <span>@Utils.FormatDate(Tree.Note.CreatedAtCurated)</span>
                    @if (showDifficulty)
                    {
                        <span>&nbsp;·</span>
                        <span>diff @Tree.Note.Difficulty</span>
                        @if (Tree.Note.HasPow)
                        {
                            <span> 🏋️</span>
                        }
                    }
                    @if (!ReplyingTo
                        && Tree.Note.NoteMetadata.ReplyToId != null
                        && TreeLayout.Length == 1
                        && !OnlyChild)
                    {
                        <span>&nbsp;·</span>
                        <span class="d-inline-block">Replying to
                            <a href="/note/@Tree.Note.NoteMetadata.ReplyToId" @onclick:stopPropagation="true">
                                @ByteTools.PubkeyToNote(Tree.Note.NoteMetadata.ReplyToId, true)
                            </a>
                        </span>
                    }
                </span>
            </p>
            <div class="mb-1 text-break note-content">
                @switch (Tree.Note.Kind)
                {
                    case NostrKind.Text:
                        @noteProcessor.GetContent(Tree.Note?.Content ?? string.Empty, Tree.Note?.NoteMetadata)
                        break;
                    case NostrKind.Repost:
                        <i class="bi bi-repeat p-1"></i>

                        <a href="/note/@Tree.Note.NoteMetadata.RepostEventId" @onclick:stopPropagation="true">
                            @ByteTools.PubkeyToNote(Tree.Note.NoteMetadata.RepostEventId, true)
                        </a>
                        break;
                }
            </div>
            @*@if (Tree.Note.NoteMetadata.HashTags.Count > 0)
            {
                <p class="mb-1">
                    @foreach (var tag in Tree.Note.NoteMetadata.HashTags)
                    {
                        <a href="/tag/@tag" @onclick:stopPropagation="true">#@tag</a>
                        <span>&nbsp;</span>
                    }
                </p>
            }*@
            @*@if (Tree.Note.NoteMetadata.EventMentions.Count > 0)
            {
                <p class="mb-1">
                    @foreach (var _event in Tree.Note.NoteMetadata.EventMentions)
                    {
                        <a href="/note/@_event.Value" @onclick:stopPropagation="true">
                            @ByteTools.PubkeyToNote(_event.Value, true)
                        </a>
                        <span>&nbsp;</span>
                    }
                </p>
            }*@
            @*@if (Tree.Note.NoteMetadata.AccountMentions.Count > 0)
            {
                <p class="mb-1">
                    @foreach (var mention in Tree.Note.NoteMetadata.AccountMentions)
                    {
                        <a href="/account/@mention.Value" @onclick:stopPropagation="true"><span>@@</span>@Utils.ShortenNostrId(mention.Value)</a>
                        <span>&nbsp;</span>
                    }
                </p>
            }*@
            @if (!ReplyingTo)
            {
                <div class="w-100" style="margin-right:-1.5rem;">
                    @if (Tree.Note.NoteMetadata.Reactions.Count > 0)
                    {
                        var groupedReactions = Tree.Note.NoteMetadata.Reactions.GroupBy(r => NormalizedReaction(r.Content)).OrderByDescending(g => g.Count());
                        @foreach (var reaction in groupedReactions.Take(3))
                        {
                            <span class="py-2 me-4">
                                <span class="d-inline-block">
                                    <a role="button" @onclick="@(() => {})" @onclick:stopPropagation="true" class="d-flex align-items-center justify-content-center rounded-5 fs-6 text-secondary text-decoration-none" style="width:32px;height:32px;">
                                        @NormalizedReaction(reaction.Key)
                                    </a>
                                </span><span class="fs-7 fw-bold">@reaction.Count()</span>
                            </span>
                        }
                        var remainingReactionCount = groupedReactions.Skip(3).Sum(reaction => reaction.Count());
                        if (remainingReactionCount > 0)
                        {
                            <span class="py-2 me-4">
                                <span class="d-inline-block">
                                    <a role="button" @onclick="@(() => {})" @onclick:stopPropagation="true" class="d-flex align-items-center justify-content-center rounded-5 fs-6 text-secondary text-decoration-none" style="width:32px;height:32px;">
                                        <i class="bi bi-three-dots"></i>
                                    </a>
                                </span><span class="fs-7 fw-bold">@remainingReactionCount</span>
                            </span>
                        }
                    }
                    <div class="d-inline-block">
                        @if (accountService.MainAccount != null)
                        {
                            <a role="button" @onclick="Reply" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                <i class="bi bi-chat"></i>
                            </a>
                            @*<a role="button"  @onclick="@(() => { })" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                <i class="bi bi-repeat"></i>
                            </a>*@
                            <a role="button" @onclick="@LikeNote" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 @(!likeSent ? "bg-primary-opacity-10-hover" : "")">
                                <i class="bi @(!likeSent ? "bi-heart" : "bi-heart-fill")"></i>
                            </a>
                            @if (Tree.Note.PublicKey == accountService.MainAccount.Id)
                            {
                                <a role="button" @onclick="@Delete" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                    <i class="bi bi-trash3"></i>
                                </a>
                            }
                        }
                        @if ((accountService.MainAccount == null || Tree.Note.PublicKey != accountService.MainAccount.Id)
                            && !string.IsNullOrEmpty(Tree.Details.Lud16Id))
                        {
                            <a role="button" @onclick="@Pay" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                <i class="bi bi-lightning-charge"></i>
                            </a>
                        }
                        @*<a role="button" @onclick="@(() => { })" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                            <i class="bi bi-clipboard"></i>
                        </a>*@
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (!ReplyingTo && Tree.Children.Count > 0)
{
    <NoteTreeViewer @ref="NoteTreeViewerRef" 
        Trees="@Tree.Children" NewestOnTop="false" MainEventId="@MainEventId"
        TreeLayout="@TreeLayout"
        OnlyChild="@(Tree.Children.Count == 1)"
        OnReply="@OnReply" />
}

@code {
    private bool likeClicked = false;
    private bool likeSent => likeClicked || Tree.Note.NoteMetadata.Reactions.Any(r => r.ReactorId == accountService?.MainAccount.Id);
    private bool showDifficulty => configService.MainConfig.ShowDifficulty;
    private IJSObjectReference jsModule;
    private ElementReference referenceElement;
    private NoteTreeViewer NoteTreeViewerRef;

    [Parameter]
    public NoteTree Tree { get; set; }

    [Parameter]
    public string MainEventId { get; set; }

    [Parameter]
    public bool ReplyingTo { get; set; }

    [Parameter]
    public int[] TreeLayout { get; set; }

    [Parameter]
    public bool OnlyChild { get; set; }

    [Parameter]
    public Action<NoteViewer> OnComponentLoad { get; set; }

    [Parameter]
    public Action<NoteViewer> OnComponentUnload { get; set; }

    [Parameter]
    public Action<NoteTree> OnReply { get; set; }

    [Parameter]
    public Action<string> OnPay { get; set; }

    protected override void OnInitialized()
    {
        accountService.AccountDetailsChanged += AccountDetailsChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && OnComponentLoad != null)
        {
            OnComponentLoad(this);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firtRender)
    {
        if (firtRender)
        {
            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "../NoteViewer.js");
        }
    }

    private void AccountDetailsChanged(object sender, (string accountId, AccountDetails details) data)
    {
        if (data.accountId != Tree.Note.PublicKey) return;
        Tree.Details = data.details;
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task LikeNote()
    {
        if (likeSent)
        {
            return;
        }
        await feedService.SendReaction("+", Tree.Note);
        likeClicked = true;
    }

    private void Pay()
    {
        OnPay?.Invoke(Tree.Details.Lud16Id);
    }

    private void Reply()
    {
        if (OnReply != null)
        {
            OnReply(Tree);
        }
    }

    private async Task Delete()
    {
        await feedService.DeleteNote(Tree.Note);
    }

    private string NormalizedReaction(string reaction)
    {
        if (string.IsNullOrEmpty(reaction) || reaction == "+")
        {
            return "❤️";
        }
        else
        {
            return reaction;
        }
    }

    public async Task<bool> IsVisibleAsync()
    {
        return jsModule != null
            ? await jsModule.InvokeAsync<bool>("isVisible", referenceElement)
            : false;
    }

    public IEnumerable<NoteViewer> GetNoteViewers()
    {
        return (new NoteViewer[] { this }).Concat(NoteTreeViewerRef?.GetNoteViewers() ?? Enumerable.Empty<NoteViewer>());
    }

    #region Dispose
    private bool _disposed;

    async ValueTask IAsyncDisposable.DisposeAsync() => await Dispose(true);

    protected virtual async Task Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                await Cleanup();
            }

            _disposed = true;
        }
    }

    private async Task Cleanup()
    {
        if (OnComponentUnload != null)
        {
            OnComponentUnload(this);
        }
        accountService.AccountDetailsChanged -= AccountDetailsChanged;
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }
    #endregion
}
