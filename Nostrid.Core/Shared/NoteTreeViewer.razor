@using Nostrid.Components;
@using Nostrid.Model;

@{
    var i = 0;
    var trees = NewestOnTop
        ? Trees.OrderByDescending(t => t.Note.CreatedAtCurated) 
        : Trees.OrderBy(t => t.Note.CreatedAtCurated);
    foreach (var tree in trees)
    {
        var treeLayout = (TreeLayout ?? new int[0]);
        if (!OnlyChild)
        {
            treeLayout = treeLayout.Append(trees.Count() - (i++)).ToArray();
        }
        <NoteViewer Tree="@tree"
                MainEventId="@MainEventId"
                ReplyingTo="@ReplyingTo"
                TreeLayout="@treeLayout" OnlyChild="@OnlyChild"
                OnComponentLoad="AddNoteViewerComponent" OnComponentUnload="RemoveNoteViewerComponent" OnReply="OnReply" OnPay="OnPay" />
    }

    <PayPopup @ref="payPopup" />
}

@code {
    [Parameter]
    public List<NoteTree> Trees { get; set; }

    [Parameter]
    public string MainEventId { get; set; }

    [Parameter]
    public bool NewestOnTop { get; set; }

    [Parameter]
    public bool ReplyingTo { get; set; }

    [Parameter]
    public int[] TreeLayout { get; set; }

    [Parameter]
    public bool OnlyChild { get; set; }

    [Parameter]
    public Action<NoteTree> OnReply { get; set; }

    private List<NoteViewer> noteViewerRefs = new List<NoteViewer>();
    private PayPopup payPopup;

    private void AddNoteViewerComponent(NoteViewer noteViewer)
    {
        noteViewerRefs.Add(noteViewer);
    }

    private void RemoveNoteViewerComponent(NoteViewer noteViewer)
    {
        noteViewerRefs.Remove(noteViewer);
    }

    public IEnumerable<NoteViewer> GetNoteViewers()
    {
        return noteViewerRefs.SelectMany(n => n.GetNoteViewers());
    }

    public async Task<NoteViewer> GetFirstVisibleAsync()
    {
        return (await Task.WhenAll(GetNoteViewers().Select(async n => new
        {
            IsVisible = await n.IsVisibleAsync(),
            NoteViewer = n
        }))).FirstOrDefault(n => n.IsVisible)?.NoteViewer;
    }

    private void OnPay(AccountDetails accountDetails)
    {
        payPopup?.Show(accountDetails);
    }
}
