@using Nostrid.Components;
@using Nostrid.Data;
@using Nostrid.Model;

@inject FeedService feedService

@code{
    [Parameter, EditorRequired]
    public List<NoteTree> Trees { get; set; } = null!;

    [Parameter]
    public bool Root { get; set; } = true;

    [Parameter]
    public bool NewestOnTop { get; set; }

    [Parameter]
    public string? MainEventId { get; set; }

    [Parameter]
    public int[] TreeLayout { get; set; } = new int[0];

    [Parameter]
    public bool OnlyChild { get; set; }

    [Parameter]
    public Action<Event>? OnReply { get; set; }

    [Parameter]
    public Action<Event>? OnRepost { get; set; }

    [Parameter]
    public Action<AccountDetails>? OnPay { get; set; }

    [Parameter]
    public Action<Event>? OnDelete { get; set; }
}

@{
    var i = 0;
    var trees = NewestOnTop
        ? Trees.OrderByDescending(t => t.Note.CreatedAtCurated) 
        : Trees.OrderBy(t => t.Note.CreatedAtCurated);
    foreach (var tree in trees)
    {
        var treeLayout = (TreeLayout ?? new int[0]);
        if (!OnlyChild)
        {
            treeLayout = treeLayout.Append(trees.Count() - (i++)).ToArray();
        }
        <NoteViewer Tree="@tree" MainEventId="@MainEventId" TreeLayout="@treeLayout" OnlyChild="@OnlyChild"
                OnComponentLoad="AddNoteViewerComponent" OnComponentUnload="RemoveNoteViewerComponent"
                OnReply="@(Root ? (arg => Reply(arg)) : OnReply)"
                OnRepost="@(Root ? (arg => Repost(arg)) : OnRepost)"
                OnPay="@(Root ? (arg => Pay(arg)) : OnPay)"
                OnDelete="@(Root ? (arg => Delete(arg)) : OnDelete)" />
    }

    if (Root)
    {
        <BootstrapModal @ref="composeModal">
            <div class="modal fade" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="staticBackdropLabel">Reply</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <NoteComposer ReplyTo="@replyingToEvent" OnSend="@(() => composeModal?.Hide())"></NoteComposer>
                        </div>
                    </div>
                </div>
            </div>
        </BootstrapModal>
        <Dialog @ref="dialog"></Dialog>
        <PayPopup @ref="payPopup" />
    }
}

@code{
    private List<NoteViewer> noteViewerRefs = new List<NoteViewer>();
    private Event? replyingToEvent;
    private BootstrapModal? composeModal;
    private BootstrapModal? confirmationModal;
    private Dialog? dialog;
    private PayPopup? payPopup;

    private void AddNoteViewerComponent(NoteViewer noteViewer)
    {
        noteViewerRefs.Add(noteViewer);
    }

    private void RemoveNoteViewerComponent(NoteViewer noteViewer)
    {
        noteViewerRefs.Remove(noteViewer);
    }

    public IEnumerable<NoteViewer> GetNoteViewers()
    {
        return noteViewerRefs.SelectMany(n => n.GetNoteViewers());
    }

    public async Task<NoteViewer?> GetFirstVisibleAsync()
    {
        return (await Task.WhenAll(GetNoteViewers().Select(async n => new
        {
            IsVisible = await n.IsVisibleAsync(),
            NoteViewer = n
        }))).FirstOrDefault(n => n.IsVisible)?.NoteViewer;
    }

    private void Reply(Event _event)
    {
        replyingToEvent = _event;
        StateHasChanged();
        composeModal?.Show();
    }

    private void Repost(Event _event)
    {
        dialog?.Show(Dialog.Options.Create(
            "Are you sure you want to repost this note?",
            "Repost",
            Dialog.Options.Button.CreateNoButton(),
            Dialog.Options.Button.CreateYesButton(async () => await feedService.Repost(_event))));
    }

    private void Pay(AccountDetails accountDetails)
    {
        payPopup?.Show(accountDetails);
    }

    private void Delete(Event _event)
    {
        dialog?.Show(Dialog.Options.Create(
            "Are you sure you want to delete this note?",
            "Delete",
            Dialog.Options.Button.CreateNoButton(),
            Dialog.Options.Button.CreateYesButton(async () => await feedService.DeleteNote(_event), "btn-danger")));
    }
}
