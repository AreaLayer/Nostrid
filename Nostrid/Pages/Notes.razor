@page "/note/{eventId}"
@implements IDisposable

@code {
    [Parameter]
    public string EventId { get; set; }
}

@using Nostrid.Components
@using Nostrid.Data
@using Nostrid.Data.Relays;
@using Nostrid.Model;
@using Nostrid.Misc;
@using System.Collections.Concurrent;
@inject FeedService feedService
@inject RelayService relayService

<h2>
    Note 
    <span class="fs-5 me-2">@ByteTools.PubkeyToNote(EventId, true)</span>
    <span class="fs-6 d-inline-block text-secondary pt-2">
        @if (renderedN.Any())
        {
            @if (!noteTrees.Exists(EventId) || 
                (!maxReached && (noteTrees.Count != 1 ||!string.IsNullOrEmpty(noteTrees[0].Note.NoteMetadata.ReplyToId))))
            {
                <i class="bi bi-exclamation-triangle-fill"></i>
                <span>Thread not fully visible. Wait, or rotate the relays.</span>
            }
            else if (maxReached)
            {
                <i class="bi bi-exclamation-triangle-fill"></i>
                <span>Thread only partially visible due to excessive nesting.</span>
            }
        }
    </span>
</h2>

@if (!renderedN.Any())
{
    <div class="text-center px-3 py-2 border-top" style="margin: 0 -1rem;">
        <div class="spinner-border mx-3 my-2" role="status">
            <span class="visually-hidden">Waiting for feed...</span>
        </div>
    </div>
}
else
{
    <div style="margin-bottom: -1rem;">
        <NoteTreeViewer Trees="@noteTrees" NewestOnTop="true" MainEventId="@EventId" OnReply="OnReply" />
    </div>
    <BootstrapModal @ref="composeModal">
        <div class="modal fade" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="staticBackdropLabel">Reply</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <NoteComposer ReplyTo="@replyingTo" OnSend="@(() => composeModal.Hide())"></NoteComposer>
                    </div>
                </div>
            </div>
        </div>
    </BootstrapModal>
}

@code {
    private ConcurrentDictionary<string, Event> renderedN = new();
    private List<NoteTree> noteTrees = new();
    private Timer refreshTimer;
    private SubscriptionFilter[] detailsFilters = { };
    private SubscriptionFilter eventFilter;
    private bool maxReached;
    private BootstrapModal composeModal;
    private NoteTree replyingTo = null;

    protected override void OnParametersSet()
    {
        int subscribedCnt = -1;

        Cleanup();

        renderedN = new();

        refreshTimer = new Timer(new TimerCallback(_ =>
        {
            if (_disposed)
                return;

            var mustRefresh = Event.Merge(renderedN, feedService.GetNotesThread(EventId, downLevels: 4, out maxReached));

            if (subscribedCnt != renderedN.Count)
            {
                UpdateSubscriptionForEvents();
                subscribedCnt = renderedN.Count;
                mustRefresh = true;
            }

            if (mustRefresh)
            {
                noteTrees = feedService.GetTreesFromNotes(renderedN.Values);
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }), null, 0, 3000);
    }

    private static object atomicSwap = new object();
    private void UpdateSubscriptionForEvents()
    {
        SubscriptionFilter[] addedFilters = { }, oldFilters;
        SubscriptionFilter addedFilter, oldFilter;
        var renderedNValues = renderedN.Values;
        var accountIds = renderedNValues.Select(n => n.PublicKey).Distinct().ToArray();
        var ids = renderedNValues.SelectMany(t => new[] { t.Id, t.NoteMetadata.ReplyToId, t.NoteMetadata.ReplyToRootId }).Union(new[] { EventId }).Where(t => !string.IsNullOrEmpty(t)).Distinct();
        relayService.AddFilter(addedFilter = new EventSubscriptionFilter(ids.ToArray()));
        if (accountIds.Length != 0)
        {
            relayService.AddFilters(addedFilters = AccountDetailsSubscriptionFilter.CreateInBatch(accountIds).ToArray());
        }
        lock (atomicSwap)
        {
            (detailsFilters, oldFilters) = (addedFilters, detailsFilters);
            (eventFilter, oldFilter) = (addedFilter, eventFilter);
        }
        relayService.DeleteFilters(oldFilters);
        relayService.DeleteFilter(oldFilter);
    }

    private void OnReply(NoteTree noteTree)
    {
        replyingTo = noteTree;
        StateHasChanged();
        composeModal.Show();
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        refreshTimer?.Dispose();
        relayService.DeleteFilter(eventFilter);
        relayService.DeleteFilters(detailsFilters);
    }
    #endregion

}
